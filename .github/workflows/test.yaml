on:
  push:
    branches:
      - main
  pull_request:

name: Test
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: buildjet/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
      - uses: buildjet/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            .bin
          key: cache-${{ hashFiles('**/go.sum') }}-${{ hashFiles('.bin/*') }}
          restore-keys: |
            cache-
      - name: Test
        run: make test
  migrate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        postgres-version:
          - { tag: "14", sha: "sha256:6fa2c95ae2da36b7ecdfbcf91e20039ea2c3d4312d38b2d96ff475c2cea15d06" }
          - { tag: "15", sha: "sha256:ee2f170c46df225310c923010230434e269238a65307539f9aced9da6ca44fad" }
          - { tag: "16", sha: "sha256:e63e99458dbfdc8e09e9e48dbe8898b59ffc44aebd76ec89f24aa393ecf7d800" }
    env:
      migrate_command: make -B tidy hack/migrate/go.mod && cd hack/migrate && go run main.go --db-url 'postgres://postgres:postgres@localhost:5432/mission-control?sslmode=disable'
    steps:
      - name: Install Go
        uses: buildjet/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Check out main branch
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
        with:
          ref: main
      - name: Apply base migrations
        run: ${{ env.migrate_command }}
      - name: Check out current branch
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
      - name: Apply new migrations
        run: ${{ env.migrate_command }}
    services:
      postgres:
        image: postgres:${{ matrix.postgres-version.tag }}@${{ matrix.postgres-version.sha }}
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mission-control
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5